[{"C:\\covid19\\src\\index.js":"1","C:\\covid19\\src\\reportWebVitals.js":"2","C:\\covid19\\src\\App.js":"3","C:\\covid19\\src\\components\\DailyGraph.js":"4","C:\\covid19\\src\\components\\Header.js":"5","C:\\covid19\\src\\components\\AccGraph.js":"6","C:\\covid19\\src\\components\\Article.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":526,"mtime":1612197976834,"results":"11","hashOfConfig":"9"},{"size":2722,"mtime":1612782490362,"results":"12","hashOfConfig":"9"},{"size":275,"mtime":1611300706713,"results":"13","hashOfConfig":"9"},{"size":3179,"mtime":1612197608535,"results":"14","hashOfConfig":"9"},{"size":1282,"mtime":1613061054829,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1whwhh1",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\covid19\\src\\index.js",[],["33","34"],"C:\\covid19\\src\\reportWebVitals.js",[],"C:\\covid19\\src\\App.js",[],"C:\\covid19\\src\\components\\DailyGraph.js",["35","36"],"import { useState, useEffect } from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\nimport axios from 'axios'\r\n\r\nconst DailyGraph = () => {\r\n   const [dailyConfirmedData, setDailyConfirmedData] = useState({}) \r\n  \r\n  useEffect(() => {\r\n  \r\n    // 이벤트가 들어감\r\n    const fetchEvents = async ()=>{\r\n      // api로 요청해서 받아온 결과물을 res에 담아 makeDate함수로 처리\r\n      const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n      makeData(res.data) \r\n    }\r\n    \r\n    const makeData = (items =>{             \r\n\r\n      // 누적확진자 수 배열\r\n      const arr = items.map(item => {               \r\n        return item.Confirmed;\r\n      });     \r\n\r\n      // 확진 date 배열 \r\n      const arr2 = items.map(x =>{ \r\n        return x.Date;\r\n      });\r\n\r\n      //일별확진자 수 배열\r\n      const covid = [];\r\n     \r\n      for(var i=0; i<arr.length; i++){        \r\n        var vo = new Object();\r\n        vo.date = arr2[i];\r\n        vo.count = arr[i] - arr[i-1];\r\n        covid.push(vo);\r\n      }\r\n      console.log(covid);\r\n      \r\n      // 그래프 레이블\r\n      const labels = covid.map(a =>{         \r\n        \r\n          var date = new Date(a.date);  //입력 파라메터로 Date 객체를 생성합니다\r\n          var yyyy = date.getFullYear().toString(); // '연도'를 뽑아내고\r\n          var mm = (date.getMonth()+1).toString(); // '월'을 뽑아내고\r\n          var dd = date.getDate().toString(); // '일'을 뽑아냅니다\r\n        \r\n          var Str = '';\r\n        \r\n          //스트링 배열의 앞자리가 두자리 수가 아닌 한자리 수일 경우 \r\n          // 두자리로 표시하기 위해 0을 채웁니다(lpad 와 동일한 역할)\r\n          // (ex : '1' -> '01' )  \r\n          Str += yyyy + '-' + (mm[1] ? mm : '0' + mm[0]) + '-' +(dd[1] ? dd : '0' + dd[0]);\r\n         \r\n        return Str;\r\n      });\r\n      \r\n      setDailyConfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"국내 일별 확진자\",\r\n            backgroundColor: \"salmon\",\r\n            fill: false, // 그래프 색을 채우겠느냐\r\n            data: covid.map(a => a.count) // 한줄짜리인경우 {return}을 안써도 된다.\r\n          }\r\n        ]  \r\n      });     \r\n    })       \r\n    fetchEvents();   \r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h2>일별 확진자 현황</h2>\r\n      <div>\r\n          <Bar data={dailyConfirmedData} options={\r\n            {title:{display:true, text:\"누적 확진자 현황\", fontSize: 16}},\r\n            {legend:{display:true, position:\"bottom\"}}\r\n          }></Bar>\r\n      </div>     \r\n    </div>        \r\n\r\n  )\r\n}\r\n\r\nexport default DailyGraph;\r\n","C:\\covid19\\src\\components\\Header.js",[],"C:\\covid19\\src\\components\\AccGraph.js",["37"],"import { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport axios from 'axios'\r\n\r\nconst AccGraph = () => {\r\n  // useState로 [↓state명, ↓ 세팅메서드 정의]\r\n  const [confirmedData, setconfirmedData] = useState({}) \r\n\r\n  useEffect(() => {\r\n    // 이벤트가 들어감\r\n    const fetchEvents = async ()=>{\r\n      // api로 요청해서 받아온 결과물을 res에 담음\r\n      const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n      makeData(res.data) \r\n    }\r\n    // 메소드 만들기 위에서 사용할 \r\n    const makeData = (items)=>{\r\n      // arr은 배열, 누적값acc, 현재값cur\r\n      const arr = items.reduce((acc, cur)=>{\r\n        \r\n        // 현재의 날짜를 담아 오늘 날짜를 추출 \r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n\r\n        // api에서 필요한 데이터 추출\r\n        const confirmed = cur.Confirmed;\r\n\r\n        //const active = cur.Active;\r\n        //const death = cur.Death;\r\n        //const recovered = cur.Recovered;\r\n        \r\n        // arr배열에 찾고있는 년월일이 들어있는지를 확인\r\n        const findItem = acc.find(a=> a.year === year && a.month === month);\r\n        \r\n        // 배열에 해당날짜가 안들어가 있으면 push로 데이터 넣기\r\n        if(!findItem){\r\n          acc.push({ year, month, date, confirmed})\r\n        }\r\n        // 배열에 들어가 있고 저장된 date가 < 현재날짜보다 작으면 현재날짜의 데이터로 업데이트 해주기 \r\n        if(findItem && findItem.date < date){\r\n          // findItem.active = active;\r\n          // findItem.death = death;\r\n          // findItem.recovered = recovered;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.date = date;\r\n          findItem.confirmed = confirmed;\r\n        }\r\n        // 업데이트된 acc(누적값)를 리턴 \r\n        return acc;\r\n      }, [])\r\n      // 데이터가 원하는 형태로 가공됨을 확인\r\n      console.log(arr);\r\n      \r\n      //데이터를 다 받아서 열거함\r\n      // items.forEach(item => console.log(item))\r\n      \r\n      const labels = arr.map(a=>{\r\n        return a.year +'.'+ (a.month+1) + '월';\r\n      });\r\n\r\n      setconfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"국내 누적 확진자\",\r\n            backgroundColor: \"salmon\",\r\n            fill: true, // 그래프 색을 채우겠느냐\r\n            data: arr.map(a => a.confirmed) // 한줄짜리인경우 {return }을 안써도 된다.\r\n          }\r\n        ]  \r\n      });\r\n    \r\n    }\r\n\r\n    fetchEvents();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h2>누적 확진자 현황</h2>     \r\n      <div>\r\n          <Line data={confirmedData} options={\r\n            {title:{display:true, text:\"누적 확진자 현황\", fontSize: 16}},\r\n            {legend:{display:true, position:\"bottom\"}}\r\n          }></Line>         \r\n      </div>   \r\n    </div>        \r\n  )\r\n}\r\n\r\nexport default AccGraph","C:\\covid19\\src\\components\\Article.js",["38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":33,"column":18,"nodeType":"45","messageId":"46","endLine":33,"endColumn":30},{"ruleId":"47","severity":1,"message":"48","line":78,"column":67,"nodeType":"49","messageId":"50","endLine":78,"endColumn":68},{"ruleId":"47","severity":1,"message":"48","line":86,"column":67,"nodeType":"49","messageId":"50","endLine":86,"endColumn":68},{"ruleId":"51","severity":1,"message":"52","line":6,"column":10,"nodeType":"53","messageId":"54","endLine":6,"endColumn":18},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-unused-vars","'articles' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]
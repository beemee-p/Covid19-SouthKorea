<<<<<<< HEAD
[{"C:\\covid19\\src\\index.js":"1","C:\\covid19\\src\\App.js":"2","C:\\covid19\\src\\reportWebVitals.js":"3","C:\\covid19\\src\\components\\Header.js":"4","C:\\covid19\\src\\components\\DailyGraph.js":"5","C:\\covid19\\src\\components\\AccGraph.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":350,"mtime":1611858589976,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":275,"mtime":1611300706713,"results":"11","hashOfConfig":"8"},{"size":2721,"mtime":1611858589978,"results":"12","hashOfConfig":"8"},{"size":3305,"mtime":1611858589981,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1whwhh1",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"C:\\covid19\\src\\index.js",[],["29","30"],"C:\\covid19\\src\\App.js",[],"C:\\covid19\\src\\reportWebVitals.js",[],"C:\\covid19\\src\\components\\Header.js",[],"C:\\covid19\\src\\components\\DailyGraph.js",["31","32","33"],"import { useState, useEffect } from 'react'\r\nimport { Bar, Line } from 'react-chartjs-2'\r\nimport axios from 'axios'\r\n\r\nconst DailyGraph = () => {\r\n   const [dailyConfirmedData, setDailyConfirmedData] = useState({}) \r\n  \r\n  useEffect(() => {\r\n  \r\n    // 이벤트가 들어감\r\n    const fetchEvents = async ()=>{\r\n      // api로 요청해서 받아온 결과물을 res에 담아 makeDate함수로 처리\r\n      const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n      makeData(res.data) \r\n    }\r\n    \r\n    const makeData = (items =>{             \r\n      \r\n      // 누적확진자 수 배열\r\n      const arr = items.map(item =>{                   \r\n        return item.Confirmed; \r\n      });\r\n      \r\n      // 일별확진자 배열   \r\n      const curArr = new Array();\r\n\r\n      for(var i=1; i<arr.length; i++){        \r\n        curArr[i] = arr[i] - arr[i-1];             \r\n      }          \r\n      \r\n      // 시작날짜 + 하루씩 추가 되는 배열생성 메소드 \r\n      function getDateRangeData(param1){ \r\n        const res_day = [];\r\n        const startDate = new Date(param1);\r\n        const today = new Date();   \r\n\r\n        while(startDate.getTime() <= today.getTime()){\r\n          \r\n          var month = (startDate.getMonth()+1);\r\n          month = month < 10 ? '0'+month : month;\r\n\r\n          var date = startDate.getDate();\r\n          date = date < 10 ? '0'+date : date;\r\n\r\n          var res_day2 = res_day.concat(startDate.getFullYear() + '-' + month + '-' +  date);         \r\n          startDate.setDate(startDate.getDate() + 1);\r\n        }\r\n        return res_day2;\r\n      }\r\n      const startDate = \"2020-01-22\";\r\n      const accDate = getDateRangeData(startDate);       \r\n     \r\n      console.log(accDate);\r\n\r\n      // 그래프 레이블\r\n      const labels = curArr.map(a =>{         \r\n        return accDate;\r\n      });\r\n      \r\n      setDailyConfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"국내 일별 확진자\",\r\n            backgroundColor: \"salmon\",\r\n            fill: false, // 그래프 색을 채우겠느냐\r\n            data: curArr.map(a => a) // 한줄짜리인경우 {return}을 안써도 된다.\r\n          }\r\n        ]  \r\n      });     \r\n    })       \r\n    fetchEvents();   \r\n  })\r\n\r\n  return (\r\n    <section>\r\n      <h2>일별 확진자 현황</h2>\r\n      <div className=\"contents\">\r\n        <div>\r\n            <Bar data={dailyConfirmedData} options={\r\n              {title:{display:true, text:\"누적 확진자 현황\", fontSize: 16}},\r\n              {legend:{display:true, position:\"bottom\"}}\r\n            }></Bar>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default DailyGraph\r\n","C:\\covid19\\src\\components\\AccGraph.js",["34","35","36","37"],"import { useState, useEffect } from 'react'\r\nimport { Bar, Line } from 'react-chartjs-2'\r\nimport axios from 'axios'\r\n\r\nconst AccGraph = () => {\r\n  // useState로 [↓state명, ↓ 세팅메서드 정의]\r\n  const [confirmedData, setconfirmedData] = useState({}) \r\n  const [dailyConfirmedData, setDailyConfirmedData] = useState({}) \r\n\r\n  useEffect(() => {\r\n    // 이벤트가 들어감\r\n    const fetchEvents = async ()=>{\r\n      // api로 요청해서 받아온 결과물을 res에 담음\r\n      const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n      makeData(res.data) \r\n    }\r\n    // 메소드 만들기 위에서 사용할 \r\n    const makeData = (items)=>{\r\n      // arr은 배열, 누적값acc, 현재값cur\r\n      const arr = items.reduce((acc, cur)=>{\r\n        \r\n        // 현재의 날짜를 담아 오늘 날짜를 추출 \r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n\r\n        // api에서 필요한 데이터 추출\r\n        const confirmed = cur.Confirmed;\r\n\r\n        //const active = cur.Active;\r\n        //const death = cur.Death;\r\n        //const recovered = cur.Recovered;\r\n        \r\n        // arr배열에 찾고있는 년월일이 들어있는지를 확인\r\n        const findItem = acc.find(a=> a.year === year && a.month === month);\r\n        \r\n        // 배열에 해당날짜가 안들어가 있으면 push로 데이터 넣기\r\n        if(!findItem){\r\n          acc.push({ year, month, date, confirmed})\r\n        }\r\n        // 배열에 들어가 있고 저장된 date가 < 현재날짜보다 작으면 현재날짜의 데이터로 업데이트 해주기 \r\n        if(findItem && findItem.date < date){\r\n          // findItem.active = active;\r\n          // findItem.death = death;\r\n          // findItem.recovered = recovered;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.date = date;\r\n          findItem.confirmed = confirmed;\r\n        }\r\n        // 업데이트된 acc(누적값)를 리턴 \r\n        return acc;\r\n      }, [])\r\n      // 데이터가 원하는 형태로 가공됨을 확인\r\n      console.log(arr);\r\n      \r\n      //데이터를 다 받아서 열거함\r\n      // items.forEach(item => console.log(item))\r\n      \r\n      const labels = arr.map(a=>{\r\n        return a.year +'.'+ (a.month+1) + '월';\r\n      });\r\n\r\n      setconfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"국내 누적 확진자\",\r\n            backgroundColor: \"salmon\",\r\n            fill: true, // 그래프 색을 채우겠느냐\r\n            data: arr.map(a => a.confirmed) // 한줄짜리인경우 {return }을 안써도 된다.\r\n          }\r\n        ]  \r\n      });\r\n    \r\n    }\r\n\r\n    fetchEvents();\r\n  })\r\n\r\n  return (\r\n    <section>\r\n      <h2>누적 확진자 현황</h2>\r\n      <div className=\"contents\">\r\n        <div>\r\n            <Line data={confirmedData} options={\r\n              {title:{display:true, text:\"누적 확진자 현황\", fontSize: 16}},\r\n              {legend:{display:true, position:\"bottom\"}}\r\n            }></Line>\r\n           \r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default AccGraph",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":2,"column":15,"nodeType":"44","messageId":"45","endLine":2,"endColumn":19},{"ruleId":"46","severity":1,"message":"47","line":25,"column":22,"nodeType":"48","messageId":"49","endLine":25,"endColumn":33},{"ruleId":"50","severity":1,"message":"51","line":81,"column":69,"nodeType":"52","messageId":"53","endLine":81,"endColumn":70},{"ruleId":"42","severity":1,"message":"54","line":2,"column":10,"nodeType":"44","messageId":"45","endLine":2,"endColumn":13},{"ruleId":"42","severity":1,"message":"55","line":8,"column":10,"nodeType":"44","messageId":"45","endLine":8,"endColumn":28},{"ruleId":"42","severity":1,"message":"56","line":8,"column":30,"nodeType":"44","messageId":"45","endLine":8,"endColumn":51},{"ruleId":"50","severity":1,"message":"51","line":88,"column":69,"nodeType":"52","messageId":"53","endLine":88,"endColumn":70},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'Line' is defined but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Bar' is defined but never used.","'dailyConfirmedData' is assigned a value but never used.","'setDailyConfirmedData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
=======
[{"C:\\covid19\\src\\index.js":"1","C:\\covid19\\src\\App.js":"2","C:\\covid19\\src\\reportWebVitals.js":"3","C:\\covid19\\src\\components\\Header.js":"4","C:\\covid19\\src\\components\\Contents.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":266,"mtime":1611858530403,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":275,"mtime":1611300706713,"results":"10","hashOfConfig":"7"},{"size":3884,"mtime":1611858530404,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1whwhh1",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"C:\\covid19\\src\\index.js",[],["24","25"],"C:\\covid19\\src\\App.js",[],"C:\\covid19\\src\\reportWebVitals.js",[],"C:\\covid19\\src\\components\\Header.js",[],"C:\\covid19\\src\\components\\Contents.js",["26","27","28","29"],"import { useState, useEffect } from 'react'\r\nimport { Bar, Line } from 'react-chartjs-2'\r\nimport axios from 'axios'\r\n\r\nconst Contents = () => {\r\n  // useState로 [↓state명, ↓ 세팅메서드 정의]\r\n  const [confirmedData, setconfirmedData] = useState({}) \r\n  const [dailyConfirmedData, setDailyConfirmedData] = useState({}) \r\n\r\n  useEffect(() => {\r\n    // 이벤트가 들어감\r\n    const fetchEvents = async ()=>{\r\n      // api로 요청해서 받아온 결과물을 res에 담음\r\n      const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n      makeData(res.data) \r\n    }\r\n    // 메소드 만들기 위에서 사용할 \r\n    const makeData = (items)=>{\r\n      // arr은 배열, 누적값acc, 현재값cur\r\n      const arr = items.reduce((acc, cur)=>{\r\n        \r\n        // 현재의 날짜를 담아 오늘 날짜를 추출 \r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n\r\n        // api에서 필요한 데이터 추출\r\n        const confirmed = cur.Confirmed;\r\n\r\n        //const active = cur.Active;\r\n        //const death = cur.Death;\r\n        //const recovered = cur.Recovered;\r\n        \r\n        // arr배열에 찾고있는 년월일이 들어있는지를 확인\r\n        const findItem = acc.find(a=> a.year === year && a.month === month);\r\n        \r\n        // 배열에 해당날짜가 안들어가 있으면 push로 데이터 넣기\r\n        if(!findItem){\r\n          acc.push({ year, month, date, confirmed})\r\n        }\r\n        // 배열에 들어가 있고 저장된 date가 < 현재날짜보다 작으면 현재날짜의 데이터로 업데이트 해주기 \r\n        if(findItem && findItem.date < date){\r\n          // findItem.active = active;\r\n          // findItem.death = death;\r\n          // findItem.recovered = recovered;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.date = date;\r\n          findItem.confirmed = confirmed;\r\n        }\r\n        // 업데이트된 acc(누적값)를 리턴 \r\n        return acc;\r\n      }, [])\r\n      // 데이터가 원하는 형태로 가공됨을 확인\r\n      console.log(arr);\r\n      \r\n      //데이터를 다 받아서 열거함\r\n      // items.forEach(item => console.log(item))\r\n      \r\n      const labels = arr.map(a=>\r\n        {return a.year +'.'+ (a.month+1) + '월';\r\n      });\r\n\r\n      setconfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"국내 누적 확진자\",\r\n            backgroundColor: \"salmon\",\r\n            fill: true, // 그래프 색을 채우겠느냐\r\n            data: arr.map(a => a.confirmed) // 한줄짜리인경우 {return }을 안써도 된다.\r\n          }\r\n        ]  \r\n      });\r\n\r\n      setDailyConfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"일별 확진자 현황\",\r\n            backgroundColor: \"salmon\",\r\n            fill: false, // 그래프 색을 채우겠느냐\r\n            data: arr.map(a => a.confirmed) // 한줄짜리인경우 {return }을 안써도 된다.\r\n          }\r\n        ]  \r\n      });\r\n    \r\n    }\r\n\r\n    fetchEvents();\r\n  })\r\n\r\n  return (\r\n    <section>\r\n      <h2>국내 코로나 현황</h2>\r\n      <div className=\"contents\">\r\n        <div>\r\n            <Bar data={confirmedData} options={\r\n              {title:{display:true, text:\"누적 확진자 현황\", fontSize: 16}},\r\n              {legend:{display:true, position:\"bottom\"}}\r\n            }></Bar>\r\n            <Line data={dailyConfirmedData} options={\r\n              {title:{display:true, text:\"일별 확진자 현황\", fontSize: 16}},\r\n              {legend:{display:true, position:\"bottom\"}}\r\n            }></Line>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Contents\r\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":2,"column":10,"nodeType":"36","messageId":"37","endLine":2,"endColumn":13},{"ruleId":"34","severity":1,"message":"38","line":8,"column":10,"nodeType":"36","messageId":"37","endLine":8,"endColumn":28},{"ruleId":"34","severity":1,"message":"39","line":8,"column":30,"nodeType":"36","messageId":"37","endLine":8,"endColumn":51},{"ruleId":"40","severity":1,"message":"41","line":88,"column":69,"nodeType":"42","messageId":"43","endLine":88,"endColumn":70},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'Bar' is defined but never used.","Identifier","unusedVar","'dailyConfirmedData' is assigned a value but never used.","'setDailyConfirmedData' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]
>>>>>>> 02ad1ac3ecd2a3546e592c1b615ba913cea5a094
